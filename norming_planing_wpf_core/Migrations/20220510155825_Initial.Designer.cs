// <auto-generated />
using System;
using System.Text.Json;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using norming_planing_wpf_core;

#nullable disable

namespace norming_planing_wpf_core.Migrations
{
    [DbContext(typeof(AcszmkdbContext))]
    [Migration("20220510155825_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("norming_planing_wpf_core.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("norming_planing_wpf_core.Detail", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("HolesCount")
                        .HasColumnType("integer");

                    b.Property<int>("HolesDiamtr")
                        .HasColumnType("integer");

                    b.Property<string>("MarkId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MarkId");

                    b.ToTable("Details");
                });

            modelBuilder.Entity("norming_planing_wpf_core.Draft", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Drafts");
                });

            modelBuilder.Entity("norming_planing_wpf_core.Instrument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Instruments");
                });

            modelBuilder.Entity("norming_planing_wpf_core.Mark", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("DraftId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DraftId");

                    b.ToTable("Marks");
                });

            modelBuilder.Entity("norming_planing_wpf_core.NormingMap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("Coefficient")
                        .HasColumnType("double precision");

                    b.Property<int?>("InstrumentId")
                        .HasColumnType("integer");

                    b.Property<JsonDocument>("Parametrs")
                        .HasColumnType("jsonb");

                    b.Property<int?>("ParentMapId")
                        .HasColumnType("integer");

                    b.Property<int>("TOTypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("InstrumentId");

                    b.HasIndex("ParentMapId");

                    b.HasIndex("TOTypeId");

                    b.ToTable("NormingMaps");
                });

            modelBuilder.Entity("norming_planing_wpf_core.TO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("NormPrice")
                        .HasColumnType("double precision");

                    b.Property<double>("NormTime")
                        .HasColumnType("double precision");

                    b.Property<int?>("TPId")
                        .HasColumnType("integer");

                    b.Property<int?>("TypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TPId");

                    b.HasIndex("TypeId");

                    b.ToTable("TOs");
                });

            modelBuilder.Entity("norming_planing_wpf_core.TOType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TOTypes");
                });

            modelBuilder.Entity("norming_planing_wpf_core.TP", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("MarkId")
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MarkId");

                    b.ToTable("TPs");
                });

            modelBuilder.Entity("norming_planing_wpf_core.Detail", b =>
                {
                    b.HasOne("norming_planing_wpf_core.Mark", "Mark")
                        .WithMany("Details")
                        .HasForeignKey("MarkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mark");
                });

            modelBuilder.Entity("norming_planing_wpf_core.Draft", b =>
                {
                    b.HasOne("norming_planing_wpf_core.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("norming_planing_wpf_core.Mark", b =>
                {
                    b.HasOne("norming_planing_wpf_core.Draft", "Draft")
                        .WithMany("Marks")
                        .HasForeignKey("DraftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Draft");
                });

            modelBuilder.Entity("norming_planing_wpf_core.NormingMap", b =>
                {
                    b.HasOne("norming_planing_wpf_core.Instrument", "Instrument")
                        .WithMany()
                        .HasForeignKey("InstrumentId");

                    b.HasOne("norming_planing_wpf_core.NormingMap", "ParentMap")
                        .WithMany()
                        .HasForeignKey("ParentMapId");

                    b.HasOne("norming_planing_wpf_core.TOType", "TOType")
                        .WithMany()
                        .HasForeignKey("TOTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instrument");

                    b.Navigation("ParentMap");

                    b.Navigation("TOType");
                });

            modelBuilder.Entity("norming_planing_wpf_core.TO", b =>
                {
                    b.HasOne("norming_planing_wpf_core.TP", null)
                        .WithMany("Operations")
                        .HasForeignKey("TPId");

                    b.HasOne("norming_planing_wpf_core.TOType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("norming_planing_wpf_core.TP", b =>
                {
                    b.HasOne("norming_planing_wpf_core.Mark", null)
                        .WithMany("TechProcesses")
                        .HasForeignKey("MarkId");
                });

            modelBuilder.Entity("norming_planing_wpf_core.Draft", b =>
                {
                    b.Navigation("Marks");
                });

            modelBuilder.Entity("norming_planing_wpf_core.Mark", b =>
                {
                    b.Navigation("Details");

                    b.Navigation("TechProcesses");
                });

            modelBuilder.Entity("norming_planing_wpf_core.TP", b =>
                {
                    b.Navigation("Operations");
                });
#pragma warning restore 612, 618
        }
    }
}
