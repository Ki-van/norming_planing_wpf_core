// <auto-generated />
using System;
using System.Text.Json;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using norming_planing_wpf_core;

#nullable disable

namespace norming_planing_wpf_core.Migrations
{
    [DbContext(typeof(AcszmkdbContext))]
    partial class AcszmkdbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "draft_status", new[] { "defining", "planning", "finished", "rejected" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "entry_type", new[] { "argument", "result" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "shift_task_status", new[] { "waiting", "performed", "complited", "defected" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DetailTO", b =>
                {
                    b.Property<int>("TOsId")
                        .HasColumnType("integer");

                    b.Property<string>("DetailsCode")
                        .HasColumnType("text");

                    b.Property<string>("DetailsMarkCode")
                        .HasColumnType("text");

                    b.Property<int>("DetailsMarkDraftId")
                        .HasColumnType("integer");

                    b.HasKey("TOsId", "DetailsCode", "DetailsMarkCode", "DetailsMarkDraftId");

                    b.HasIndex("DetailsCode", "DetailsMarkCode", "DetailsMarkDraftId");

                    b.ToTable("DetailTO");
                });

            modelBuilder.Entity("EmployeePositionTOType", b =>
                {
                    b.Property<int>("EmployeePositionsId")
                        .HasColumnType("integer");

                    b.Property<int>("TOTypesId")
                        .HasColumnType("integer");

                    b.HasKey("EmployeePositionsId", "TOTypesId");

                    b.HasIndex("TOTypesId");

                    b.ToTable("EmployeePositionTOType");
                });

            modelBuilder.Entity("InstrumentTOType", b =>
                {
                    b.Property<int>("InstrumentsId")
                        .HasColumnType("integer");

                    b.Property<int>("TOTypesId")
                        .HasColumnType("integer");

                    b.HasKey("InstrumentsId", "TOTypesId");

                    b.HasIndex("TOTypesId");

                    b.ToTable("InstrumentTOType");
                });

            modelBuilder.Entity("norming_planing_wpf_core.Assemblie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("OppositeCount")
                        .HasColumnType("bigint");

                    b.Property<long>("StraightCount")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Assemblie");
                });

            modelBuilder.Entity("norming_planing_wpf_core.AssemblieEntry", b =>
                {
                    b.Property<int>("TOId")
                        .HasColumnType("integer");

                    b.Property<int>("AssemblieId")
                        .HasColumnType("integer");

                    b.Property<EntryType>("EntryType")
                        .HasColumnType("entry_type");

                    b.HasKey("TOId", "AssemblieId");

                    b.HasIndex("AssemblieId");

                    b.ToTable("AssemblieEntry", (string)null);
                });

            modelBuilder.Entity("norming_planing_wpf_core.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Заказчик1"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Заказчик2"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Заказчик3"
                        });
                });

            modelBuilder.Entity("norming_planing_wpf_core.Detail", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("MarkCode")
                        .HasColumnType("text");

                    b.Property<int>("MarkDraftId")
                        .HasColumnType("integer");

                    b.Property<double?>("MainLenght")
                        .HasColumnType("double precision");

                    b.Property<int?>("MaterialId")
                        .HasColumnType("integer");

                    b.Property<long>("OppositeCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.Property<int?>("SteelGradeId")
                        .HasColumnType("integer");

                    b.Property<long>("StraightCount")
                        .HasColumnType("bigint");

                    b.Property<double>("Weight")
                        .HasColumnType("double precision");

                    b.HasKey("Code", "MarkCode", "MarkDraftId");

                    b.HasIndex("MaterialId");

                    b.HasIndex("SteelGradeId");

                    b.HasIndex("MarkCode", "MarkDraftId");

                    b.ToTable("Details");

                    b.HasData(
                        new
                        {
                            Code = "Деталь 1",
                            MarkCode = "М1",
                            MarkDraftId = 1,
                            MaterialId = 1,
                            SteelGradeId = 1,
                            StraightCount = 2L,
                            Weight = 20.0
                        },
                        new
                        {
                            Code = "Деталь 2",
                            MarkCode = "М1",
                            MarkDraftId = 1,
                            MaterialId = 1,
                            SteelGradeId = 1,
                            StraightCount = 2L,
                            Weight = 20.0
                        },
                        new
                        {
                            Code = "Деталь 1",
                            MarkCode = "М2",
                            MarkDraftId = 1,
                            MaterialId = 2,
                            SteelGradeId = 1,
                            StraightCount = 2L,
                            Weight = 20.0
                        },
                        new
                        {
                            Code = "Деталь 2",
                            MarkCode = "М2",
                            MarkDraftId = 1,
                            MaterialId = 2,
                            SteelGradeId = 1,
                            StraightCount = 2L,
                            Weight = 20.0
                        });
                });

            modelBuilder.Entity("norming_planing_wpf_core.Draft", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("Priority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.Property<DraftStatus>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("draft_status")
                        .HasDefaultValue(DraftStatus.Defining);

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Drafts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CustomerId = 1,
                            Deadline = new DateTime(2022, 6, 18, 18, 59, 57, 531, DateTimeKind.Utc).AddTicks(8757),
                            Name = "Свинокомлекс"
                        },
                        new
                        {
                            Id = 2,
                            CustomerId = 2,
                            Deadline = new DateTime(2022, 6, 18, 18, 59, 57, 531, DateTimeKind.Utc).AddTicks(8764),
                            Name = "РГС"
                        },
                        new
                        {
                            Id = 3,
                            CustomerId = 3,
                            Deadline = new DateTime(2022, 6, 18, 18, 59, 57, 531, DateTimeKind.Utc).AddTicks(8765),
                            Name = "Проект 3",
                            Status = DraftStatus.Planning
                        });
                });

            modelBuilder.Entity("norming_planing_wpf_core.Employee", b =>
                {
                    b.Property<string>("Passport")
                        .HasColumnType("text");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PositionId")
                        .HasColumnType("integer");

                    b.Property<long>("Qualification")
                        .HasColumnType("bigint");

                    b.HasKey("Passport");

                    b.HasIndex("PositionId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("norming_planing_wpf_core.EmployeePosition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasAlternateKey("Position");

                    b.ToTable("EmployeePositions");
                });

            modelBuilder.Entity("norming_planing_wpf_core.Instrument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("TOId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TOId");

                    b.ToTable("Instruments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Плазма"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Сверлильный станок"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Автоматическая сварка в аргонной стреде"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Болгарка"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Летночная пила"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Плазменный станок"
                        });
                });

            modelBuilder.Entity("norming_planing_wpf_core.Mark", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<int>("DraftId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("OppositeCount")
                        .HasColumnType("bigint");

                    b.Property<long>("StraightCount")
                        .HasColumnType("bigint");

                    b.HasKey("Code", "DraftId");

                    b.HasIndex("DraftId");

                    b.ToTable("Marks");

                    b.HasData(
                        new
                        {
                            Code = "М1",
                            DraftId = 1,
                            Name = "Балка1",
                            OppositeCount = 0L,
                            StraightCount = 2L
                        },
                        new
                        {
                            Code = "М2",
                            DraftId = 1,
                            Name = "Балка2",
                            OppositeCount = 0L,
                            StraightCount = 2L
                        },
                        new
                        {
                            Code = "М3",
                            DraftId = 1,
                            Name = "Балка3",
                            OppositeCount = 0L,
                            StraightCount = 2L
                        },
                        new
                        {
                            Code = "М1",
                            DraftId = 2,
                            Name = "Балка4",
                            OppositeCount = 0L,
                            StraightCount = 2L
                        },
                        new
                        {
                            Code = "М2",
                            DraftId = 2,
                            Name = "Балка5",
                            OppositeCount = 0L,
                            StraightCount = 2L
                        },
                        new
                        {
                            Code = "М3",
                            DraftId = 2,
                            Name = "Балка6",
                            OppositeCount = 0L,
                            StraightCount = 2L
                        });
                });

            modelBuilder.Entity("norming_planing_wpf_core.Material", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<JsonDocument>("Scalars")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("Materials");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Балка 10",
                            Scalars = System.Text.Json.JsonDocument.Parse("[{\"Var\":\"l\",\"Val\":3},{\"Var\":\"w\",\"Val\":2},{\"Var\":\"t\",\"Val\":0.001}]", new System.Text.Json.JsonDocumentOptions()),
                            TypeId = 3
                        },
                        new
                        {
                            Id = 3,
                            Name = "У 50",
                            Scalars = System.Text.Json.JsonDocument.Parse("[{\"Var\":\"l\",\"Val\":3},{\"Var\":\"w\",\"Val\":2},{\"Var\":\"t\",\"Val\":0.001}]", new System.Text.Json.JsonDocumentOptions()),
                            TypeId = 4
                        },
                        new
                        {
                            Id = 4,
                            Name = "У 56",
                            Scalars = System.Text.Json.JsonDocument.Parse("[{\"Var\":\"l\",\"Val\":3},{\"Var\":\"w\",\"Val\":2},{\"Var\":\"t\",\"Val\":0.001}]", new System.Text.Json.JsonDocumentOptions()),
                            TypeId = 4
                        },
                        new
                        {
                            Id = 5,
                            Name = "У 63",
                            Scalars = System.Text.Json.JsonDocument.Parse("[{\"Var\":\"l\",\"Val\":3},{\"Var\":\"w\",\"Val\":2},{\"Var\":\"t\",\"Val\":0.001}]", new System.Text.Json.JsonDocumentOptions()),
                            TypeId = 4
                        },
                        new
                        {
                            Id = 6,
                            Name = "У 70",
                            Scalars = System.Text.Json.JsonDocument.Parse("[{\"Var\":\"l\",\"Val\":3},{\"Var\":\"w\",\"Val\":2},{\"Var\":\"t\",\"Val\":0.001}]", new System.Text.Json.JsonDocumentOptions()),
                            TypeId = 4
                        },
                        new
                        {
                            Id = 7,
                            Name = "У 75",
                            Scalars = System.Text.Json.JsonDocument.Parse("[{\"Var\":\"l\",\"Val\":3},{\"Var\":\"w\",\"Val\":2},{\"Var\":\"t\",\"Val\":0.001}]", new System.Text.Json.JsonDocumentOptions()),
                            TypeId = 4
                        },
                        new
                        {
                            Id = 8,
                            Name = "У 80",
                            Scalars = System.Text.Json.JsonDocument.Parse("[{\"Var\":\"l\",\"Val\":3},{\"Var\":\"w\",\"Val\":2},{\"Var\":\"t\",\"Val\":0.001}]", new System.Text.Json.JsonDocumentOptions()),
                            TypeId = 4
                        },
                        new
                        {
                            Id = 9,
                            Name = "У 90",
                            Scalars = System.Text.Json.JsonDocument.Parse("[{\"Var\":\"l\",\"Val\":3},{\"Var\":\"w\",\"Val\":2},{\"Var\":\"t\",\"Val\":0.001}]", new System.Text.Json.JsonDocumentOptions()),
                            TypeId = 4
                        },
                        new
                        {
                            Id = 10,
                            Name = "У 100",
                            Scalars = System.Text.Json.JsonDocument.Parse("[{\"Var\":\"l\",\"Val\":3},{\"Var\":\"w\",\"Val\":2},{\"Var\":\"t\",\"Val\":0.001}]", new System.Text.Json.JsonDocumentOptions()),
                            TypeId = 4
                        },
                        new
                        {
                            Id = 11,
                            Name = "У 110",
                            Scalars = System.Text.Json.JsonDocument.Parse("[{\"Var\":\"l\",\"Val\":3},{\"Var\":\"w\",\"Val\":2},{\"Var\":\"t\",\"Val\":0.001}]", new System.Text.Json.JsonDocumentOptions()),
                            TypeId = 4
                        },
                        new
                        {
                            Id = 12,
                            Name = "-12х240",
                            Scalars = System.Text.Json.JsonDocument.Parse("[{\"Var\":\"a\",\"Val\":3},{\"Var\":\"b\",\"Val\":2},{\"Var\":\"c\",\"Val\":0.001},{\"Var\":\"S\",\"Val\":6}]", new System.Text.Json.JsonDocumentOptions()),
                            TypeId = 1
                        },
                        new
                        {
                            Id = 13,
                            Name = "-10х249",
                            Scalars = System.Text.Json.JsonDocument.Parse("[{\"Var\":\"a\",\"Val\":3},{\"Var\":\"b\",\"Val\":2},{\"Var\":\"c\",\"Val\":0.001},{\"Var\":\"S\",\"Val\":6}]", new System.Text.Json.JsonDocumentOptions()),
                            TypeId = 1
                        },
                        new
                        {
                            Id = 14,
                            Name = "-30х330",
                            Scalars = System.Text.Json.JsonDocument.Parse("[{\"Var\":\"a\",\"Val\":3},{\"Var\":\"b\",\"Val\":2},{\"Var\":\"c\",\"Val\":0.001},{\"Var\":\"S\",\"Val\":6}]", new System.Text.Json.JsonDocumentOptions()),
                            TypeId = 1
                        },
                        new
                        {
                            Id = 15,
                            Name = "Балка 12",
                            Scalars = System.Text.Json.JsonDocument.Parse("[{\"Var\":\"l\",\"Val\":3},{\"Var\":\"w\",\"Val\":2},{\"Var\":\"t\",\"Val\":0.001}]", new System.Text.Json.JsonDocumentOptions()),
                            TypeId = 3
                        },
                        new
                        {
                            Id = 16,
                            Name = "Балка 14",
                            Scalars = System.Text.Json.JsonDocument.Parse("[{\"Var\":\"l\",\"Val\":3},{\"Var\":\"w\",\"Val\":2},{\"Var\":\"t\",\"Val\":0.001}]", new System.Text.Json.JsonDocumentOptions()),
                            TypeId = 3
                        },
                        new
                        {
                            Id = 17,
                            Name = "Балка 16",
                            Scalars = System.Text.Json.JsonDocument.Parse("[{\"Var\":\"l\",\"Val\":3},{\"Var\":\"w\",\"Val\":2},{\"Var\":\"t\",\"Val\":0.001}]", new System.Text.Json.JsonDocumentOptions()),
                            TypeId = 3
                        },
                        new
                        {
                            Id = 18,
                            Name = "Балка 18",
                            Scalars = System.Text.Json.JsonDocument.Parse("[{\"Var\":\"l\",\"Val\":3},{\"Var\":\"w\",\"Val\":2},{\"Var\":\"t\",\"Val\":0.001}]", new System.Text.Json.JsonDocumentOptions()),
                            TypeId = 3
                        },
                        new
                        {
                            Id = 19,
                            Name = "Балка 20",
                            Scalars = System.Text.Json.JsonDocument.Parse("[{\"Var\":\"l\",\"Val\":3},{\"Var\":\"w\",\"Val\":2},{\"Var\":\"t\",\"Val\":0.001}]", new System.Text.Json.JsonDocumentOptions()),
                            TypeId = 3
                        },
                        new
                        {
                            Id = 20,
                            Name = "Балка 25",
                            Scalars = System.Text.Json.JsonDocument.Parse("[{\"Var\":\"l\",\"Val\":3},{\"Var\":\"w\",\"Val\":2},{\"Var\":\"t\",\"Val\":0.001}]", new System.Text.Json.JsonDocumentOptions()),
                            TypeId = 3
                        },
                        new
                        {
                            Id = 21,
                            Name = "Балка 30",
                            Scalars = System.Text.Json.JsonDocument.Parse("[{\"Var\":\"l\",\"Val\":3},{\"Var\":\"w\",\"Val\":2},{\"Var\":\"t\",\"Val\":0.001}]", new System.Text.Json.JsonDocumentOptions()),
                            TypeId = 3
                        },
                        new
                        {
                            Id = 22,
                            Name = "Балка 35",
                            Scalars = System.Text.Json.JsonDocument.Parse("[{\"Var\":\"l\",\"Val\":3},{\"Var\":\"w\",\"Val\":2},{\"Var\":\"t\",\"Val\":0.001}]", new System.Text.Json.JsonDocumentOptions()),
                            TypeId = 3
                        },
                        new
                        {
                            Id = 23,
                            Name = "Балка 40",
                            Scalars = System.Text.Json.JsonDocument.Parse("[{\"Var\":\"l\",\"Val\":3},{\"Var\":\"w\",\"Val\":2},{\"Var\":\"t\",\"Val\":0.001}]", new System.Text.Json.JsonDocumentOptions()),
                            TypeId = 3
                        },
                        new
                        {
                            Id = 24,
                            Name = "Балка 45",
                            Scalars = System.Text.Json.JsonDocument.Parse("[{\"Var\":\"l\",\"Val\":3},{\"Var\":\"w\",\"Val\":2},{\"Var\":\"t\",\"Val\":0.001}]", new System.Text.Json.JsonDocumentOptions()),
                            TypeId = 3
                        },
                        new
                        {
                            Id = 25,
                            Name = "Балка 50",
                            Scalars = System.Text.Json.JsonDocument.Parse("[{\"Var\":\"l\",\"Val\":3},{\"Var\":\"w\",\"Val\":2},{\"Var\":\"t\",\"Val\":0.001}]", new System.Text.Json.JsonDocumentOptions()),
                            TypeId = 3
                        },
                        new
                        {
                            Id = 26,
                            Name = "Балка 55",
                            Scalars = System.Text.Json.JsonDocument.Parse("[{\"Var\":\"l\",\"Val\":3},{\"Var\":\"w\",\"Val\":2},{\"Var\":\"t\",\"Val\":0.001}]", new System.Text.Json.JsonDocumentOptions()),
                            TypeId = 3
                        },
                        new
                        {
                            Id = 2,
                            Name = "У40",
                            Scalars = System.Text.Json.JsonDocument.Parse("[{\"Var\":\"l\",\"Val\":3},{\"Var\":\"w\",\"Val\":2},{\"Var\":\"t\",\"Val\":0.001}]", new System.Text.Json.JsonDocumentOptions()),
                            TypeId = 4
                        });
                });

            modelBuilder.Entity("norming_planing_wpf_core.MaterialType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<JsonDocument>("Structure")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.HasKey("Id");

                    b.ToTable("MaterialTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Лист",
                            Structure = System.Text.Json.JsonDocument.Parse("[{\"Var\":\"a\",\"Name\":\"\\u0421\\u0442\\u043E\\u0440\\u043E\\u043D\\u0430 \\u0410\",\"Func\":null},{\"Var\":\"b\",\"Name\":\"\\u0421\\u0442\\u043E\\u0440\\u043E\\u043D\\u0430 \\u0411\",\"Func\":null},{\"Var\":\"\\u0441\",\"Name\":\"\\u0422\\u043E\\u043B\\u0449\\u0438\\u043D\\u0430\",\"Func\":null},{\"Var\":\"S\",\"Name\":\"\\u041F\\u043B\\u043E\\u0449\\u0430\\u0434\\u044C\",\"Func\":\"a*b\"}]", new System.Text.Json.JsonDocumentOptions())
                        },
                        new
                        {
                            Id = 2,
                            Name = "Круг",
                            Structure = System.Text.Json.JsonDocument.Parse("[{\"Var\":\"d\",\"Name\":\"\\u0414\\u0438\\u0430\\u043C\\u0435\\u0442\\u0440 \\u043D\\u0430\\u0440\\u0443\\u0436\\u043D\\u044B\\u0439\",\"Func\":null},{\"Var\":\"S\",\"Name\":\"\\u041F\\u043B\\u043E\\u0449\\u0430\\u0434\\u044C \\u0441\\u0435\\u0447\\u0435\\u043D\\u0438\\u044F\",\"Func\":\"pi*(d/2)^2\"}]", new System.Text.Json.JsonDocumentOptions())
                        },
                        new
                        {
                            Id = 3,
                            Name = "Балка",
                            Structure = System.Text.Json.JsonDocument.Parse("[{\"Var\":\"l\",\"Name\":\"\\u0412\\u044B\\u0441\\u043E\\u0442\\u0430\",\"Func\":null},{\"Var\":\"w\",\"Name\":\"\\u0428\\u0438\\u0440\\u0438\\u043D\\u0430\",\"Func\":null},{\"Var\":\"t\",\"Name\":\"\\u0422\\u043E\\u043B\\u0449\\u0438\\u043D\\u0430\",\"Func\":null}]", new System.Text.Json.JsonDocumentOptions())
                        },
                        new
                        {
                            Id = 4,
                            Name = "Уголок",
                            Structure = System.Text.Json.JsonDocument.Parse("[{\"Var\":\"l\",\"Name\":\"\\u0412\\u044B\\u0441\\u043E\\u0442\\u0430\",\"Func\":null},{\"Var\":\"w\",\"Name\":\"\\u0428\\u0438\\u0440\\u0438\\u043D\\u0430\",\"Func\":null},{\"Var\":\"t\",\"Name\":\"\\u0422\\u043E\\u043B\\u0449\\u0438\\u043D\\u0430\",\"Func\":null}]", new System.Text.Json.JsonDocumentOptions())
                        });
                });

            modelBuilder.Entity("norming_planing_wpf_core.NormingMap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double?>("Coefficient")
                        .HasColumnType("double precision");

                    b.Property<string>("FirstArg")
                        .HasColumnType("jsonb");

                    b.Property<string>("MembersCvalification")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Norms")
                        .HasColumnType("jsonb");

                    b.Property<double>("OneHourPrice")
                        .HasColumnType("double precision");

                    b.Property<int?>("ParentMapId")
                        .HasColumnType("integer");

                    b.Property<string>("SecondArg")
                        .HasColumnType("jsonb");

                    b.Property<int>("TOTypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ParentMapId");

                    b.HasIndex("TOTypeId");

                    b.ToTable("NormingMaps");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FirstArg = "{\"Path\":\"Material\",\"Name\":\"\\u0422\\u0438\\u043F \\u043C\\u0430\\u0442\\u0435\\u0440\\u0438\\u0430\\u043B\\u0430, \\u0411\\u0430\\u043B\\u043A\\u0430\",\"Range\":[\"\\u0411\\u0430\\u043B\\u043A\\u0430 12\",\"\\u0411\\u0430\\u043B\\u043A\\u0430 14\",\"\\u0411\\u0430\\u043B\\u043A\\u0430 16\",\"\\u0411\\u0430\\u043B\\u043A\\u0430 18\",\"\\u0411\\u0430\\u043B\\u043A\\u0430 20\",\"\\u0411\\u0430\\u043B\\u043A\\u0430 25\",\"\\u0411\\u0430\\u043B\\u043A\\u0430 30\",\"\\u0411\\u0430\\u043B\\u043A\\u0430 35\",\"\\u0411\\u0430\\u043B\\u043A\\u0430 40\",\"\\u0411\\u0430\\u043B\\u043A\\u0430 45\",\"\\u0411\\u0430\\u043B\\u043A\\u0430 50\",\"\\u0411\\u0430\\u043B\\u043A\\u0430 55\"]}",
                            MembersCvalification = "[{\"Cvalification\":1,\"Count\":1}]",
                            Name = "Резка на ленточной пиле",
                            Norms = "[[0.045,0.059,0.07,0.092,0.1,0.12,0.14,0.17,0.18,0.2,0.23,0.25]]",
                            OneHourPrice = 200.0,
                            TOTypeId = 1
                        },
                        new
                        {
                            Id = 2,
                            MembersCvalification = "[{\"Cvalification\":3,\"Count\":1}]",
                            Name = "Плазменнная резка",
                            OneHourPrice = 150.0,
                            TOTypeId = 1
                        },
                        new
                        {
                            Id = 3,
                            MembersCvalification = "[{\"Cvalification\":4,\"Count\":1}]",
                            Name = "Механизированная дуговая сварка в углекислом газе",
                            OneHourPrice = 300.0,
                            TOTypeId = 4
                        },
                        new
                        {
                            Id = 4,
                            MembersCvalification = "[{\"Cvalification\":1,\"Count\":1}]",
                            Name = "Зачистка кромок",
                            OneHourPrice = 100.0,
                            TOTypeId = 5
                        },
                        new
                        {
                            Id = 5,
                            MembersCvalification = "[{\"Cvalification\":1,\"Count\":1},{\"Cvalification\":3,\"Count\":1}]",
                            Name = "Окрашивание лакокрасочными составами",
                            OneHourPrice = 350.0,
                            TOTypeId = 6
                        },
                        new
                        {
                            Id = 6,
                            MembersCvalification = "[{\"Cvalification\":1,\"Count\":1}]",
                            Name = "Сверление отверстий на станке",
                            OneHourPrice = 350.0,
                            TOTypeId = 2
                        },
                        new
                        {
                            Id = 7,
                            FirstArg = "{\"Path\":\"TotalWeight\",\"Name\":\"\\u041C\\u0430\\u0441\\u0441\\u0430 \\u043A\\u043E\\u043D\\u0441\\u0442\\u0440\\u0443\\u043A\\u0446\\u0438\\u0438, \\u043A\\u0433\",\"Range\":[\"150\",\"200\",\"300\",\"400\",\"500\",\"800\",\"1000\"]}",
                            MembersCvalification = "[{\"Cvalification\":1,\"Count\":4},{\"Cvalification\":2,\"Count\":3},{\"Cvalification\":1,\"Count\":2}]",
                            Name = "Сборка балок, ригелей и прогонов",
                            Norms = "[[3.1,2.7,2.2,1.8,1.6,1,0.83],[3.7,3.1,2.6,2,1.8,1.3,0.93],[5.1,4.5,3.4,2.5,2.3,1.7,1.2],[7.2,6.2,4.7,3.3,3,2.1,1.5],[9.5,8.4,6.2,4.4,3.8,2.8,2],[12.5,10.5,7.7,5.5,4.7,3.3,2.4],[15,13,9.2,6.6,5.5,4,2.9]]",
                            OneHourPrice = 350.0,
                            SecondArg = "{\"Path\":\"AssemblieEntries.Count\",\"Name\":\"\\u041A\\u043E\\u043B\\u0438\\u0447\\u0435\\u0441\\u0442\\u0432\\u043E \\u0434\\u0435\\u0442\\u0430\\u043B\\u0435\\u0439 \\u0432 \\u043A\\u043E\\u043D\\u0441\\u0442\\u0440\\u0443\\u043A\\u0446\\u0438\\u0438\",\"Range\":[\"5\",\"7\",\"10\",\"15\",\"20\",\"30\"]}",
                            TOTypeId = 3
                        });
                });

            modelBuilder.Entity("norming_planing_wpf_core.ShiftTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Issue")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double?>("NormPrice")
                        .HasColumnType("double precision");

                    b.Property<double?>("NormTime")
                        .HasColumnType("double precision");

                    b.Property<ShiftTaskStatus>("Status")
                        .HasColumnType("shift_task_status");

                    b.Property<int>("TOId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TOId");

                    b.ToTable("ShiftTasks");
                });

            modelBuilder.Entity("norming_planing_wpf_core.SteelGrade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SteelGrades");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "С345"
                        },
                        new
                        {
                            Id = 2,
                            Name = "C35E "
                        });
                });

            modelBuilder.Entity("norming_planing_wpf_core.TaskParticipation", b =>
                {
                    b.Property<string>("EmployeeId")
                        .HasColumnType("text");

                    b.Property<int>("ShiftTaskId")
                        .HasColumnType("integer");

                    b.Property<double?>("ParticipationPercentage")
                        .HasColumnType("double precision");

                    b.HasKey("EmployeeId", "ShiftTaskId");

                    b.HasIndex("ShiftTaskId");

                    b.ToTable("TaskParticipation", (string)null);
                });

            modelBuilder.Entity("norming_planing_wpf_core.TO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("MarkCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("MarkDraftId")
                        .HasColumnType("integer");

                    b.Property<string>("MembersCvalification")
                        .HasColumnType("jsonb");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("NormPrice")
                        .HasColumnType("double precision");

                    b.Property<double>("NormTime")
                        .HasColumnType("double precision");

                    b.Property<int?>("NormingMapId")
                        .HasColumnType("integer");

                    b.Property<long>("OperationCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(1L);

                    b.Property<int?>("PreviousId")
                        .HasColumnType("integer");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer");

                    b.Property<JsonDocument>("TypeParams")
                        .HasColumnType("jsonb");

                    b.HasKey("Id");

                    b.HasIndex("NormingMapId");

                    b.HasIndex("PreviousId");

                    b.HasIndex("TypeId");

                    b.HasIndex("MarkCode", "MarkDraftId");

                    b.ToTable("TOs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MarkCode = "М1",
                            MarkDraftId = 1,
                            Name = "Сегмент кольца жёсткости",
                            NormPrice = 20.100000000000001,
                            NormTime = 0.20000000000000001,
                            TypeId = 1
                        },
                        new
                        {
                            Id = 2,
                            MarkCode = "М1",
                            MarkDraftId = 1,
                            Name = "Пластина кольца жёсткости",
                            NormPrice = 20.100000000000001,
                            NormTime = 0.20000000000000001,
                            PreviousId = 1,
                            TypeId = 1
                        },
                        new
                        {
                            Id = 3,
                            MarkCode = "М1",
                            MarkDraftId = 1,
                            Name = "Элемент днища",
                            NormPrice = 20.100000000000001,
                            NormTime = 0.20000000000000001,
                            PreviousId = 2,
                            TypeId = 1
                        },
                        new
                        {
                            Id = 4,
                            MarkCode = "М1",
                            MarkDraftId = 1,
                            Name = "Элемент днища",
                            NormPrice = 20.100000000000001,
                            NormTime = 0.20000000000000001,
                            PreviousId = 3,
                            TypeId = 1
                        },
                        new
                        {
                            Id = 5,
                            MarkCode = "М1",
                            MarkDraftId = 1,
                            Name = "Элемент горловины (рыбка)",
                            NormPrice = 20.100000000000001,
                            NormTime = 0.20000000000000001,
                            PreviousId = 4,
                            TypeId = 1
                        },
                        new
                        {
                            Id = 6,
                            MarkCode = "М1",
                            MarkDraftId = 1,
                            Name = "Установка краевых рёбер жёсткости на карту",
                            NormPrice = 20.100000000000001,
                            NormTime = 0.20000000000000001,
                            PreviousId = 5,
                            TypeId = 3
                        },
                        new
                        {
                            Id = 7,
                            MarkCode = "М1",
                            MarkDraftId = 1,
                            Name = "Установка днищ и рёбер жёсткости на карту обечайки",
                            NormPrice = 20.100000000000001,
                            NormTime = 0.20000000000000001,
                            PreviousId = 6,
                            TypeId = 3
                        },
                        new
                        {
                            Id = 8,
                            MarkCode = "М1",
                            MarkDraftId = 1,
                            Name = "Установка монтажного прогона",
                            NormPrice = 20.100000000000001,
                            NormTime = 0.20000000000000001,
                            PreviousId = 7,
                            TypeId = 3
                        },
                        new
                        {
                            Id = 9,
                            MarkCode = "М1",
                            MarkDraftId = 1,
                            Name = "Установка каната лебёдки с роликовым  блоком",
                            NormPrice = 20.100000000000001,
                            NormTime = 0.20000000000000001,
                            PreviousId = 8,
                            TypeId = 3
                        });
                });

            modelBuilder.Entity("norming_planing_wpf_core.TOType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ArgumentCount")
                        .HasColumnType("integer");

                    b.Property<string>("IncludedWorks")
                        .HasColumnType("jsonb");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ParamsTypes")
                        .HasColumnType("jsonb");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.ToTable("TOTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArgumentCount = 0,
                            Name = "Резка"
                        },
                        new
                        {
                            Id = 2,
                            ArgumentCount = 0,
                            Name = "Сверление",
                            ParamsTypes = "[{\"Name\":\"\\u0414\\u0438\\u0430\\u043C\\u0435\\u0442\\u0440 \\u043E\\u0442\\u0432\\u0435\\u0440\\u0441\\u0442\\u0438\\u0439\",\"Type\":\"Double\",\"Identifyer\":null}]"
                        },
                        new
                        {
                            Id = 3,
                            ArgumentCount = 1,
                            Name = "Сборка"
                        },
                        new
                        {
                            Id = 4,
                            ArgumentCount = 1,
                            Name = "Сварка",
                            ParamsTypes = "[{\"Name\":\"\\u0422\\u0438\\u043F \\u0448\\u0432\\u0430\",\"Type\":\"UserCollection\",\"Identifyer\":1}]"
                        },
                        new
                        {
                            Id = 5,
                            ArgumentCount = 0,
                            Name = "Зачистка"
                        },
                        new
                        {
                            Id = 6,
                            ArgumentCount = 0,
                            IncludedWorks = "[\"\\u041E\\u0447\\u0438\\u0441\\u0442\\u043A\\u0430\",\"\\u041E\\u0431\\u0435\\u0437\\u0436\\u0438\\u0440\\u0438\\u0432\\u0430\\u043D\\u0438\\u0435\",\"\\u0413\\u0440\\u0443\\u043D\\u0442\\u043E\\u0432\\u0430\\u043D\\u0438\\u0435 \\u043F\\u0438\\u0441\\u0442\\u043E\\u043B\\u0435\\u0442\\u043E\\u043C \\u043D\\u0430 1 \\u0441\\u043B\\u043E\\u0439\",\"\\u041E\\u043A\\u0440\\u0430\\u0448\\u0438\\u0432\\u0430\\u043D\\u0438\\u0435 \\u043F\\u0438\\u0441\\u0442\\u043E\\u043B\\u0435\\u0442\\u043E\\u043C \\u043D\\u0430 1 \\u0441\\u043B\\u043E\\u0439\"]",
                            Name = "Окраска"
                        });
                });

            modelBuilder.Entity("norming_planing_wpf_core.UserCollection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.ToTable("UserCollections");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Типы сварочного шва"
                        });
                });

            modelBuilder.Entity("norming_planing_wpf_core.UserCollectionItem", b =>
                {
                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.Property<int>("UserCollectionId")
                        .HasColumnType("integer");

                    b.HasKey("Value", "UserCollectionId");

                    b.HasIndex("UserCollectionId");

                    b.ToTable("UserCollectionItem");

                    b.HasData(
                        new
                        {
                            Value = "C2",
                            UserCollectionId = 1
                        },
                        new
                        {
                            Value = "C7",
                            UserCollectionId = 1
                        },
                        new
                        {
                            Value = "C17",
                            UserCollectionId = 1
                        },
                        new
                        {
                            Value = "T1",
                            UserCollectionId = 1
                        });
                });

            modelBuilder.Entity("DetailTO", b =>
                {
                    b.HasOne("norming_planing_wpf_core.TO", null)
                        .WithMany()
                        .HasForeignKey("TOsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("norming_planing_wpf_core.Detail", null)
                        .WithMany()
                        .HasForeignKey("DetailsCode", "DetailsMarkCode", "DetailsMarkDraftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EmployeePositionTOType", b =>
                {
                    b.HasOne("norming_planing_wpf_core.EmployeePosition", null)
                        .WithMany()
                        .HasForeignKey("EmployeePositionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("norming_planing_wpf_core.TOType", null)
                        .WithMany()
                        .HasForeignKey("TOTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InstrumentTOType", b =>
                {
                    b.HasOne("norming_planing_wpf_core.Instrument", null)
                        .WithMany()
                        .HasForeignKey("InstrumentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("norming_planing_wpf_core.TOType", null)
                        .WithMany()
                        .HasForeignKey("TOTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("norming_planing_wpf_core.AssemblieEntry", b =>
                {
                    b.HasOne("norming_planing_wpf_core.Assemblie", "Assemblie")
                        .WithMany("AssemblieEntries")
                        .HasForeignKey("AssemblieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("norming_planing_wpf_core.TO", "TO")
                        .WithMany("AssemblieEntries")
                        .HasForeignKey("TOId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assemblie");

                    b.Navigation("TO");
                });

            modelBuilder.Entity("norming_planing_wpf_core.Detail", b =>
                {
                    b.HasOne("norming_planing_wpf_core.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId");

                    b.HasOne("norming_planing_wpf_core.SteelGrade", "SteelGrade")
                        .WithMany()
                        .HasForeignKey("SteelGradeId");

                    b.HasOne("norming_planing_wpf_core.Mark", "Mark")
                        .WithMany("Details")
                        .HasForeignKey("MarkCode", "MarkDraftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mark");

                    b.Navigation("Material");

                    b.Navigation("SteelGrade");
                });

            modelBuilder.Entity("norming_planing_wpf_core.Draft", b =>
                {
                    b.HasOne("norming_planing_wpf_core.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("norming_planing_wpf_core.Employee", b =>
                {
                    b.HasOne("norming_planing_wpf_core.EmployeePosition", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Position");
                });

            modelBuilder.Entity("norming_planing_wpf_core.Instrument", b =>
                {
                    b.HasOne("norming_planing_wpf_core.TO", null)
                        .WithMany("Instruments")
                        .HasForeignKey("TOId");
                });

            modelBuilder.Entity("norming_planing_wpf_core.Mark", b =>
                {
                    b.HasOne("norming_planing_wpf_core.Draft", "Draft")
                        .WithMany("Marks")
                        .HasForeignKey("DraftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Draft");
                });

            modelBuilder.Entity("norming_planing_wpf_core.Material", b =>
                {
                    b.HasOne("norming_planing_wpf_core.MaterialType", "Type")
                        .WithMany("Materials")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Type");
                });

            modelBuilder.Entity("norming_planing_wpf_core.NormingMap", b =>
                {
                    b.HasOne("norming_planing_wpf_core.NormingMap", "ParentMap")
                        .WithMany()
                        .HasForeignKey("ParentMapId");

                    b.HasOne("norming_planing_wpf_core.TOType", "TOType")
                        .WithMany()
                        .HasForeignKey("TOTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentMap");

                    b.Navigation("TOType");
                });

            modelBuilder.Entity("norming_planing_wpf_core.ShiftTask", b =>
                {
                    b.HasOne("norming_planing_wpf_core.TO", "TO")
                        .WithMany()
                        .HasForeignKey("TOId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TO");
                });

            modelBuilder.Entity("norming_planing_wpf_core.TaskParticipation", b =>
                {
                    b.HasOne("norming_planing_wpf_core.Employee", "Employee")
                        .WithMany("Participations")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("norming_planing_wpf_core.ShiftTask", "ShiftTask")
                        .WithMany("Participations")
                        .HasForeignKey("ShiftTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("ShiftTask");
                });

            modelBuilder.Entity("norming_planing_wpf_core.TO", b =>
                {
                    b.HasOne("norming_planing_wpf_core.NormingMap", "NormingMap")
                        .WithMany()
                        .HasForeignKey("NormingMapId");

                    b.HasOne("norming_planing_wpf_core.TO", "Previous")
                        .WithMany()
                        .HasForeignKey("PreviousId");

                    b.HasOne("norming_planing_wpf_core.TOType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("norming_planing_wpf_core.Mark", "Mark")
                        .WithMany("TechProcesses")
                        .HasForeignKey("MarkCode", "MarkDraftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mark");

                    b.Navigation("NormingMap");

                    b.Navigation("Previous");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("norming_planing_wpf_core.UserCollectionItem", b =>
                {
                    b.HasOne("norming_planing_wpf_core.UserCollection", "UserCollection")
                        .WithMany("Items")
                        .HasForeignKey("UserCollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserCollection");
                });

            modelBuilder.Entity("norming_planing_wpf_core.Assemblie", b =>
                {
                    b.Navigation("AssemblieEntries");
                });

            modelBuilder.Entity("norming_planing_wpf_core.Draft", b =>
                {
                    b.Navigation("Marks");
                });

            modelBuilder.Entity("norming_planing_wpf_core.Employee", b =>
                {
                    b.Navigation("Participations");
                });

            modelBuilder.Entity("norming_planing_wpf_core.Mark", b =>
                {
                    b.Navigation("Details");

                    b.Navigation("TechProcesses");
                });

            modelBuilder.Entity("norming_planing_wpf_core.MaterialType", b =>
                {
                    b.Navigation("Materials");
                });

            modelBuilder.Entity("norming_planing_wpf_core.ShiftTask", b =>
                {
                    b.Navigation("Participations");
                });

            modelBuilder.Entity("norming_planing_wpf_core.TO", b =>
                {
                    b.Navigation("AssemblieEntries");

                    b.Navigation("Instruments");
                });

            modelBuilder.Entity("norming_planing_wpf_core.UserCollection", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
